diff -Naur u-boot-2020.10-official/arch/arm/Kconfig u-boot-2020.10-patched/arch/arm/Kconfig
--- u-boot-2020.10-official/arch/arm/Kconfig	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/arch/arm/Kconfig	2021-01-20 21:51:18.000000000 -0500
@@ -1736,6 +1736,8 @@
 	imply SYS_NS16550
 	imply TPL_SYSRESET
 	imply USB_FUNCTION_FASTBOOT
+	select OF_LIBFDT
+	select OF_LIBFDT_OVERLAY

 config ARCH_OCTEONTX
 	bool "Support OcteonTX SoCs"
diff -Naur u-boot-2020.10-official/arch/arm/mach-rockchip/Kconfig u-boot-2020.10-patched/arch/arm/mach-rockchip/Kconfig
--- u-boot-2020.10-official/arch/arm/mach-rockchip/Kconfig	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/arch/arm/mach-rockchip/Kconfig	2021-01-20 21:51:18.000000000 -0500
@@ -376,6 +376,31 @@
 	  containing U-Boot. The image is built by binman. U-Boot sits near
 	  the start of the image.

+config ROCKCHIP_ADVANCED_RECOVERY
+	bool "Advanced recovery button for Rockchip boards"
+	default n
+
+config ROCKCHIP_ADVANCED_RECOVERY_LED
+	string "Advanced recovery button for Rockchip boards - toggled led label"
+	depends on ROCKCHIP_ADVANCED_RECOVERY
+
+config ROCKCHIP_ADVANCED_RECOVERY_UMS
+	bool "Advanced recovery for Rockchip boards - UMS support"
+	depends on ROCKCHIP_ADVANCED_RECOVERY
+	depends on CMD_USB_MASS_STORAGE
+	default y if ROCKCHIP_ADVANCED_RECOVERY
+
+config ROCKCHIP_ADVANCED_RECOVERY_ROCKUSB
+	bool "Advanced recovery for Rockchip boards - ROCKUSB support"
+	depends on ROCKCHIP_ADVANCED_RECOVERY
+	depends on CMD_ROCKUSB
+	default y if ROCKCHIP_ADVANCED_RECOVERY
+
+config ROCKCHIP_ADVANCED_RECOVERY_MASKROM
+	bool "Advanced recovery for Rockchip boards - MASKROM support"
+	depends on ROCKCHIP_ADVANCED_RECOVERY
+	default y if ROCKCHIP_ADVANCED_RECOVERY
+
 source "arch/arm/mach-rockchip/px30/Kconfig"
 source "arch/arm/mach-rockchip/rk3036/Kconfig"
 source "arch/arm/mach-rockchip/rk3128/Kconfig"
diff -Naur u-boot-2020.10-official/arch/arm/mach-rockchip/boot_mode.c u-boot-2020.10-patched/arch/arm/mach-rockchip/boot_mode.c
--- u-boot-2020.10-official/arch/arm/mach-rockchip/boot_mode.c	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/arch/arm/mach-rockchip/boot_mode.c	2021-01-20 21:51:18.000000000 -0500
@@ -7,7 +7,10 @@
 #include <adc.h>
 #include <command.h>
 #include <env.h>
+#include <led.h>
 #include <log.h>
+#include <mmc.h>
+#include <linux/delay.h>
 #include <asm/io.h>
 #include <asm/arch-rockchip/boot_mode.h>
 #include <dm/device.h>
@@ -70,13 +73,158 @@
 		return false;
 }

+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY)
+#define RECOVERY_LED_BY_LABEL(dev) led_get_by_label(CONFIG_ROCKCHIP_ADVANCED_RECOVERY_LED, dev)
+void rockchip_blink_recovery_led(int times)
+{
+	struct udevice *dev;
+	RECOVERY_LED_BY_LABEL(&dev);
+	for (int i = 0; i < times; ++i) {
+		led_set_state(dev, LEDST_ON);
+		mdelay(100);
+		led_set_state(dev, LEDST_OFF);
+		mdelay(100);
+	}
+}
+
+int rockchip_dnl_mode(int num_modes)
+{
+	int mode = 0;
+	const char *mode_names[5] = {
+		"none",
+		"ums",
+		"rockusb",
+		"fastboot",
+		"maskrom"
+	};
+
+	const int modes_enabled[5] = {
+		1,
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY_UMS)
+		1,
+#else
+		0,
+#endif
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY_ROCKUSB)
+		1,
+#else
+		0,
+#endif
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY_FASTBOOT)
+		1,
+#else
+		0,
+#endif
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY_MASKROM)
+		1,
+#else
+		0,
+#endif
+	};
+
+	while(mode < num_modes) {
+		++mode;
+
+		if (modes_enabled[mode]) {
+			printf("rockchip_dnl_mode = %s mode\n", mode_names[mode]);
+			rockchip_blink_recovery_led(mode);
+
+			// return early
+	 		if (mode == num_modes) {
+	 			goto end;
+	 		}
+
+			// wait 2 seconds
+			for (int i = 0; i < 100; ++i) {
+				if (!rockchip_dnl_key_pressed()) {
+					goto end;
+				}
+				mdelay(20);
+			}
+		}
+	}
+
+end:
+	return mode;
+}
+
+__weak void rockchip_prepare_download_mode(void)
+{
+}
+
+int rockchip_has_mmc_device(int devnum)
+{
+	struct mmc *mmc;
+	mmc = find_mmc_device(devnum);
+	if (!mmc || mmc_init(mmc))
+		return 0;
+	else
+		return 1;
+}
+#endif
+
 void rockchip_dnl_mode_check(void)
 {
+#if defined(CONFIG_ROCKCHIP_ADVANCED_RECOVERY)
+	int mmc_device = 0;
+	int ret = 0;
+	char cmd[32];
+
+	if (!rockchip_dnl_key_pressed()) {
+		return 0;
+	}
+
+	if (rockchip_has_mmc_device(0)) {
+		mmc_device = 0;
+	} else if (rockchip_has_mmc_device(1)) {
+		mmc_device = 1;
+	} else {
+		printf("no mmc device suitable for download mode!\n");
+		return 0;
+	}
+
+	printf("using mmc%d device for download mode\n", mmc_device);
+
+	switch(rockchip_dnl_mode(4)) {
+	case 0:
+		return;
+
+	case 1:
+		printf("entering ums mode...\n");
+		rockchip_prepare_download_mode();
+		sprintf(cmd, "ums 0 mmc %d", mmc_device);
+		cli_simple_run_command(cmd, 0);
+		break;
+
+	case 2:
+		printf("entering rockusb mode...\n");
+		rockchip_prepare_download_mode();
+		sprintf(cmd, "rockusb 0 mmc %d", mmc_device);
+		cli_simple_run_command(cmd, 0);
+		break;
+
+	case 3:
+		printf("entering fastboot mode...\n");
+		rockchip_prepare_download_mode();
+		sprintf(cmd, "mmc dev %d; fastboot usb 0", mmc_device);
+		cli_simple_run_command(cmd, 0);
+		break;
+
+	case 4:
+		printf("entering maskrom mode...\n");
+		rockchip_prepare_download_mode();
+		break;
+	}
+
+	set_back_to_bootrom_dnl_flag();
+	do_reset(NULL, 0, 0, NULL);
+#else
 	if (rockchip_dnl_key_pressed()) {
 		printf("download key pressed, entering download mode...");
 		set_back_to_bootrom_dnl_flag();
 		do_reset(NULL, 0, 0, NULL);
 	}
+#endif
 }

 int setup_boot_mode(void)
diff -Naur u-boot-2020.10-official/arch/arm/mach-rockchip/misc.c u-boot-2020.10-patched/arch/arm/mach-rockchip/misc.c
--- u-boot-2020.10-official/arch/arm/mach-rockchip/misc.c	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/arch/arm/mach-rockchip/misc.c	2021-01-20 21:51:18.000000000 -0500
@@ -52,6 +52,11 @@
 	mac_addr[0] &= 0xfe;  /* clear multicast bit */
 	mac_addr[0] |= 0x02;  /* set local assignment bit (IEEE802) */
 	eth_env_set_enetaddr("ethaddr", mac_addr);
+
+	/* Make a valid MAC address for eth1 too */
+	mac_addr[5] += 0x20;
+	mac_addr[5] &= 0xff;
+	eth_env_set_enetaddr("eth1addr", mac_addr);
 #endif
 	return 0;
 }
diff -Naur u-boot-2020.10-official/arch/arm/mach-rockchip/rk3399/rk3399.c u-boot-2020.10-patched/arch/arm/mach-rockchip/rk3399/rk3399.c
--- u-boot-2020.10-official/arch/arm/mach-rockchip/rk3399/rk3399.c	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/arch/arm/mach-rockchip/rk3399/rk3399.c	2021-01-20 21:51:17.000000000 -0500
@@ -19,6 +19,8 @@
 #include <asm/arch-rockchip/hardware.h>
 #include <linux/bitops.h>
 #include <power/regulator.h>
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/pinctrl/rockchip.h>

 DECLARE_GLOBAL_DATA_PTR;

@@ -119,8 +121,8 @@
 	struct rk3399_grf_regs * const grf = (void *)GRF_BASE;
 #ifdef CONFIG_TARGET_CHROMEBOOK_BOB
 	struct rk3399_pmugrf_regs * const pmugrf = (void *)PMUGRF_BASE;
-	struct rockchip_gpio_regs * const gpio = (void *)GPIO0_BASE;
 #endif
+	struct rockchip_gpio_regs * const gpio = (void *)GPIO0_BASE;

 #if defined(CONFIG_DEBUG_UART_BASE) && (CONFIG_DEBUG_UART_BASE == 0xff180000)
 	/* Enable early UART0 on the RK3399 */
@@ -153,6 +155,16 @@
 	spl_gpio_set_pull(&pmugrf->gpio0_p, GPIO(BANK_B, 4), GPIO_PULL_NORMAL);
 #endif /* CONFIG_TARGET_CHROMEBOOK_BOB */

+#ifdef CONFIG_TARGET_PINEBOOK_PRO_RK3399
+	{
+		// set GPIO0_A2/B3 to GPIO_ACTIVE_HIGH
+		// set GPIO0_A2/B3 to OUTPUT
+		int mask = (1UL << RK_PA2) | (1UL << RK_PB3);
+		setbits_le32(&gpio->swport_dr, mask);
+		setbits_le32(&gpio->swport_ddr, mask);
+	}
+#endif
+
 	/* Enable early UART2 channel C on the RK3399 */
 	rk_clrsetreg(&grf->gpio4c_iomux,
 		     GRF_GPIO4C3_SEL_MASK,
diff -Naur u-boot-2020.10-official/arch/arm/mach-rockchip/rk3399/syscon_rk3399.c u-boot-2020.10-patched/arch/arm/mach-rockchip/rk3399/syscon_rk3399.c
--- u-boot-2020.10-official/arch/arm/mach-rockchip/rk3399/syscon_rk3399.c	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/arch/arm/mach-rockchip/rk3399/syscon_rk3399.c	2021-01-20 21:51:18.000000000 -0500
@@ -25,6 +25,9 @@
 	.bind = dm_scan_fdt_dev,
 #endif
 	.of_match = rk3399_syscon_ids,
+#if !CONFIG_IS_ENABLED(OF_PLATDATA)
+	.bind = dm_scan_fdt_dev,
+#endif
 };

 #if CONFIG_IS_ENABLED(OF_PLATDATA)
diff -Naur u-boot-2020.10-official/drivers/clk/rockchip/clk_rk3399.c u-boot-2020.10-patched/drivers/clk/rockchip/clk_rk3399.c
--- u-boot-2020.10-official/drivers/clk/rockchip/clk_rk3399.c	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/drivers/clk/rockchip/clk_rk3399.c	2021-01-20 21:51:18.000000000 -0500
@@ -50,12 +50,9 @@
 	.fbdiv = (u32)((u64)hz * _refdiv * _postdiv1 * _postdiv2 / OSC_HZ),\
 	.postdiv1 = _postdiv1, .postdiv2 = _postdiv2};

-#if defined(CONFIG_SPL_BUILD)
 static const struct pll_div gpll_init_cfg = PLL_DIVISORS(GPLL_HZ, 2, 2, 1);
 static const struct pll_div cpll_init_cfg = PLL_DIVISORS(CPLL_HZ, 1, 2, 2);
-#else
 static const struct pll_div ppll_init_cfg = PLL_DIVISORS(PPLL_HZ, 2, 2, 1);
-#endif

 static const struct pll_div apll_l_1600_cfg = PLL_DIVISORS(1600 * MHz, 3, 1, 1);
 static const struct pll_div apll_l_600_cfg = PLL_DIVISORS(600 * MHz, 1, 2, 1);
@@ -1274,7 +1271,6 @@
 	.disable = rk3399_clk_disable,
 };

-#ifdef CONFIG_SPL_BUILD
 static void rkclk_init(struct rockchip_cru *cru)
 {
 	u32 aclk_div;
@@ -1352,11 +1348,9 @@
 		     hclk_div << HCLK_PERILP1_DIV_CON_SHIFT |
 		     HCLK_PERILP1_PLL_SEL_GPLL << HCLK_PERILP1_PLL_SEL_SHIFT);
 }
-#endif

 static int rk3399_clk_probe(struct udevice *dev)
 {
-#ifdef CONFIG_SPL_BUILD
 	struct rk3399_clk_priv *priv = dev_get_priv(dev);

 #if CONFIG_IS_ENABLED(OF_PLATDATA)
@@ -1365,7 +1359,6 @@
 	priv->cru = map_sysmem(plat->dtd.reg[0], plat->dtd.reg[1]);
 #endif
 	rkclk_init(priv->cru);
-#endif
 	return 0;
 }

diff -Naur u-boot-2020.10-official/drivers/misc/rockchip-efuse.c u-boot-2020.10-patched/drivers/misc/rockchip-efuse.c
--- u-boot-2020.10-official/drivers/misc/rockchip-efuse.c	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/drivers/misc/rockchip-efuse.c	2021-01-20 21:51:18.000000000 -0500
@@ -13,8 +13,18 @@
 #include <dm.h>
 #include <linux/bitops.h>
 #include <linux/delay.h>
+#include <malloc.h>
 #include <misc.h>

+#define RK3328_INT_STATUS	0x0018
+#define RK3328_DOUT		0x0020
+#define RK3328_AUTO_CTRL	0x0024
+#define RK3328_INT_FINISH	BIT(0)
+#define RK3328_AUTO_ENB		BIT(0)
+#define RK3328_AUTO_RD		BIT(1)
+#define RK3328_NO_SECURE_BYTES	32
+#define RK3328_SECURE_BYTES	96
+
 #define RK3399_A_SHIFT          16
 #define RK3399_A_MASK           0x3ff
 #define RK3399_NFUSES           32
@@ -27,6 +37,9 @@
 #define RK3399_STROBE           BIT(1)
 #define RK3399_CSB              BIT(0)

+typedef int (*EFUSE_READ)(struct udevice *dev, int offset, void *buf,
+			  int size);
+
 struct rockchip_efuse_regs {
 	u32 ctrl;      /* 0x00  efuse control register */
 	u32 dout;      /* 0x04  efuse data out register */
@@ -35,6 +48,10 @@
 	u32 jtag_pass; /* 0x10  JTAG password */
 	u32 strobe_finish_ctrl;
 		       /* 0x14	efuse strobe finish control register */
+	u32 int_status;/* 0x18 */
+	u32 reserved;  /* 0x1c */
+	u32 dout2;     /* 0x20 */
+	u32 auto_ctrl; /* 0x24 */
 };

 struct rockchip_efuse_platdata {
@@ -83,6 +100,57 @@
 );
 #endif

+static int rockchip_rk3328_efuse_read(struct udevice *dev, int offset,
+				      void *buf, int size)
+{
+	struct rockchip_efuse_platdata *plat = dev_get_platdata(dev);
+	struct rockchip_efuse_regs *efuse =
+		(struct rockchip_efuse_regs *)plat->base;
+	unsigned int addr_start, addr_end, addr_offset, addr_len;
+	u32 out_value, status;
+	u8 *buffer;
+	int ret = 0, i = 0, j = 0;
+
+	/* Max non-secure Byte */
+	if (size > RK3328_NO_SECURE_BYTES)
+		size = RK3328_NO_SECURE_BYTES;
+
+	/* 128 Byte efuse, 96 Byte for secure, 32 Byte for non-secure */
+	offset += RK3328_SECURE_BYTES;
+	addr_start = rounddown(offset, RK3399_BYTES_PER_FUSE) /
+			       RK3399_BYTES_PER_FUSE;
+	addr_end = roundup(offset + size, RK3399_BYTES_PER_FUSE) /
+			   RK3399_BYTES_PER_FUSE;
+	addr_offset = offset % RK3399_BYTES_PER_FUSE;
+	addr_len = addr_end - addr_start;
+
+	buffer = calloc(1, sizeof(*buffer) * addr_len * RK3399_BYTES_PER_FUSE);
+	if (!buffer)
+		return -ENOMEM;
+
+	for (j = 0; j < addr_len; j++) {
+		writel(RK3328_AUTO_RD | RK3328_AUTO_ENB |
+		       ((addr_start++ & RK3399_A_MASK) << RK3399_A_SHIFT),
+		       &efuse->auto_ctrl);
+		udelay(5);
+		status = readl(&efuse->int_status);
+		if (!(status & RK3328_INT_FINISH)) {
+			ret = -EIO;
+			goto err;
+		}
+		out_value = readl(&efuse->dout2);
+		writel(RK3328_INT_FINISH, &efuse->int_status);
+
+		memcpy(&buffer[i], &out_value, RK3399_BYTES_PER_FUSE);
+		i += RK3399_BYTES_PER_FUSE;
+	}
+	memcpy(buf, buffer + addr_offset, size);
+err:
+	free(buffer);
+
+	return ret;
+}
+
 static int rockchip_rk3399_efuse_read(struct udevice *dev, int offset,
 				      void *buf, int size)
 {
@@ -130,7 +198,13 @@
 static int rockchip_efuse_read(struct udevice *dev, int offset,
 			       void *buf, int size)
 {
-	return rockchip_rk3399_efuse_read(dev, offset, buf, size);
+	EFUSE_READ efuse_read = NULL;
+
+	efuse_read = (EFUSE_READ)dev_get_driver_data(dev);
+	if (!efuse_read)
+		return -EINVAL;
+
+	return (*efuse_read)(dev, offset, buf, size);
 }

 static const struct misc_ops rockchip_efuse_ops = {
@@ -146,7 +220,14 @@
 }

 static const struct udevice_id rockchip_efuse_ids[] = {
-	{ .compatible = "rockchip,rk3399-efuse" },
+	{
+		.compatible = "rockchip,rk3328-efuse",
+		.data = (ulong)&rockchip_rk3328_efuse_read,
+	},
+	{
+		.compatible = "rockchip,rk3399-efuse",
+		.data = (ulong)&rockchip_rk3399_efuse_read,
+	},
 	{}
 };

diff -Naur u-boot-2020.10-official/drivers/mmc/rockchip_dw_mmc.c u-boot-2020.10-patched/drivers/mmc/rockchip_dw_mmc.c
--- u-boot-2020.10-official/drivers/mmc/rockchip_dw_mmc.c	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/drivers/mmc/rockchip_dw_mmc.c	2021-01-20 21:51:18.000000000 -0500
@@ -72,7 +72,11 @@

 	if (priv->fifo_depth < 0)
 		return -EINVAL;
+#ifdef CONFIG_SPL_BUILD
+	priv->fifo_mode = true; // always force fifo mode
+#else
 	priv->fifo_mode = dev_read_bool(dev, "fifo-mode");
+#endif

 #ifdef CONFIG_SPL_BUILD
 	if (!priv->fifo_mode)
diff -Naur u-boot-2020.10-official/drivers/net/gmac_rockchip.c u-boot-2020.10-patched/drivers/net/gmac_rockchip.c
--- u-boot-2020.10-official/drivers/net/gmac_rockchip.c	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/drivers/net/gmac_rockchip.c	2021-01-20 21:51:18.000000000 -0500
@@ -11,6 +11,7 @@
 #include <log.h>
 #include <net.h>
 #include <phy.h>
+#include <reset.h>
 #include <syscon.h>
 #include <asm/io.h>
 #include <asm/arch-rockchip/periph.h>
@@ -25,6 +26,8 @@
 #include <asm/arch-rockchip/grf_rk3399.h>
 #include <asm/arch-rockchip/grf_rv1108.h>
 #include <dm/pinctrl.h>
+#include <dm/of_access.h>
+#include <linux/delay.h>
 #include <dt-bindings/clock/rk3288-cru.h>
 #include <linux/bitops.h>
 #include "designware.h"
@@ -42,21 +45,29 @@
 struct gmac_rockchip_platdata {
 	struct dw_eth_pdata dw_eth_pdata;
 	bool clock_input;
+	bool integrated_phy;
+	struct reset_ctl phy_reset;
 	int tx_delay;
 	int rx_delay;
 };

 struct rk_gmac_ops {
-	int (*fix_mac_speed)(struct dw_eth_dev *priv);
+	int (*fix_rmii_speed)(struct gmac_rockchip_platdata *pdata,
+			      struct dw_eth_dev *priv);
+	int (*fix_rgmii_speed)(struct gmac_rockchip_platdata *pdata,
+			       struct dw_eth_dev *priv);
 	void (*set_to_rmii)(struct gmac_rockchip_platdata *pdata);
 	void (*set_to_rgmii)(struct gmac_rockchip_platdata *pdata);
+	void (*integrated_phy_powerup)(struct gmac_rockchip_platdata *pdata);
 };


 static int gmac_rockchip_ofdata_to_platdata(struct udevice *dev)
 {
 	struct gmac_rockchip_platdata *pdata = dev_get_platdata(dev);
+	struct ofnode_phandle_args args;
 	const char *string;
+	int ret;

 	string = dev_read_string(dev, "clock_in_out");
 	if (!strcmp(string, "input"))
@@ -64,6 +75,25 @@
 	else
 		pdata->clock_input = false;

+	/* If phy-handle property is passed from DT, use it as the PHY */
+	ret = dev_read_phandle_with_args(dev, "phy-handle", NULL, 0, 0, &args);
+	if (ret) {
+		debug("Cannot get phy phandle: ret=%d\n", ret);
+		pdata->integrated_phy = dev_read_bool(dev, "phy-is-integrated");
+	} else {
+		debug("Found phy-handle subnode\n");
+		pdata->integrated_phy = ofnode_read_bool(args.node,
+							 "phy-is-integrated");
+	}
+
+	if (pdata->integrated_phy) {
+		ret = reset_get_by_name(dev, "mac-phy", &pdata->phy_reset);
+		if (ret) {
+			debug("No PHY reset control found: ret=%d\n", ret);
+			return ret;
+		}
+	}
+
 	/* Check the new naming-style first... */
 	pdata->tx_delay = dev_read_u32_default(dev, "tx_delay", -ENOENT);
 	pdata->rx_delay = dev_read_u32_default(dev, "rx_delay", -ENOENT);
@@ -77,7 +107,8 @@
 	return designware_eth_ofdata_to_platdata(dev);
 }

-static int px30_gmac_fix_mac_speed(struct dw_eth_dev *priv)
+static int px30_gmac_fix_rmii_speed(struct gmac_rockchip_platdata *pdata,
+				      struct dw_eth_dev *priv)
 {
 	struct px30_grf *grf;
 	struct clk clk_speed;
@@ -118,7 +149,43 @@
 	return 0;
 }

-static int rk3228_gmac_fix_mac_speed(struct dw_eth_dev *priv)
+static int rk3228_gmac_fix_rmii_speed(struct gmac_rockchip_platdata *pdata,
+				      struct dw_eth_dev *priv)
+{
+	struct rk322x_grf *grf;
+	int clk;
+	enum {
+		RK3228_GMAC_RMII_CLK_MASK   = BIT(7),
+		RK3228_GMAC_RMII_CLK_2_5M   = 0,
+		RK3228_GMAC_RMII_CLK_25M    = BIT(7),
+
+		RK3228_GMAC_RMII_SPEED_MASK = BIT(2),
+		RK3228_GMAC_RMII_SPEED_10   = 0,
+		RK3228_GMAC_RMII_SPEED_100  = BIT(2),
+	};
+
+	switch (priv->phydev->speed) {
+	case 10:
+		clk = RK3228_GMAC_RMII_CLK_2_5M | RK3228_GMAC_RMII_SPEED_10;
+		break;
+	case 100:
+		clk = RK3228_GMAC_RMII_CLK_25M | RK3228_GMAC_RMII_SPEED_100;
+		break;
+	default:
+		debug("Unknown phy speed: %d\n", priv->phydev->speed);
+		return -EINVAL;
+	}
+
+	grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+	rk_clrsetreg(&grf->mac_con[1],
+		     RK3228_GMAC_RMII_CLK_MASK | RK3228_GMAC_RMII_SPEED_MASK,
+		     clk);
+
+	return 0;
+}
+
+static int rk3228_gmac_fix_rgmii_speed(struct gmac_rockchip_platdata *pdata,
+				       struct dw_eth_dev *priv)
 {
 	struct rk322x_grf *grf;
 	int clk;
@@ -151,7 +218,8 @@
 	return 0;
 }

-static int rk3288_gmac_fix_mac_speed(struct dw_eth_dev *priv)
+static int rk3288_gmac_fix_rgmii_speed(struct gmac_rockchip_platdata *pdata,
+				       struct dw_eth_dev *priv)
 {
 	struct rk3288_grf *grf;
 	int clk;
@@ -177,7 +245,8 @@
 	return 0;
 }

-static int rk3308_gmac_fix_mac_speed(struct dw_eth_dev *priv)
+static int rk3308_gmac_fix_rmii_speed(struct gmac_rockchip_platdata *pdata,
+				       struct dw_eth_dev *priv)
 {
 	struct rk3308_grf *grf;
 	struct clk clk_speed;
@@ -218,7 +287,43 @@
 	return 0;
 }

-static int rk3328_gmac_fix_mac_speed(struct dw_eth_dev *priv)
+static int rk3328_gmac_fix_rmii_speed(struct gmac_rockchip_platdata *pdata,
+				      struct dw_eth_dev *priv)
+{
+	struct rk3328_grf_regs *grf;
+	int clk;
+	enum {
+		RK3328_GMAC_RMII_CLK_MASK   = BIT(7),
+		RK3328_GMAC_RMII_CLK_2_5M   = 0,
+		RK3328_GMAC_RMII_CLK_25M    = BIT(7),
+
+		RK3328_GMAC_RMII_SPEED_MASK = BIT(2),
+		RK3328_GMAC_RMII_SPEED_10   = 0,
+		RK3328_GMAC_RMII_SPEED_100  = BIT(2),
+	};
+
+	switch (priv->phydev->speed) {
+	case 10:
+		clk = RK3328_GMAC_RMII_CLK_2_5M | RK3328_GMAC_RMII_SPEED_10;
+		break;
+	case 100:
+		clk = RK3328_GMAC_RMII_CLK_25M | RK3328_GMAC_RMII_SPEED_100;
+		break;
+	default:
+		debug("Unknown phy speed: %d\n", priv->phydev->speed);
+		return -EINVAL;
+	}
+
+	grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+	rk_clrsetreg(pdata->integrated_phy ? &grf->mac_con[2] : &grf->mac_con[1],
+		     RK3328_GMAC_RMII_CLK_MASK | RK3328_GMAC_RMII_SPEED_MASK,
+		     clk);
+
+	return 0;
+}
+
+static int rk3328_gmac_fix_rgmii_speed(struct gmac_rockchip_platdata *pdata,
+				       struct dw_eth_dev *priv)
 {
 	struct rk3328_grf_regs *grf;
 	int clk;
@@ -251,7 +356,8 @@
 	return 0;
 }

-static int rk3368_gmac_fix_mac_speed(struct dw_eth_dev *priv)
+static int rk3368_gmac_fix_rgmii_speed(struct gmac_rockchip_platdata *pdata,
+				       struct dw_eth_dev *priv)
 {
 	struct rk3368_grf *grf;
 	int clk;
@@ -283,7 +389,8 @@
 	return 0;
 }

-static int rk3399_gmac_fix_mac_speed(struct dw_eth_dev *priv)
+static int rk3399_gmac_fix_rgmii_speed(struct gmac_rockchip_platdata *pdata,
+				       struct dw_eth_dev *priv)
 {
 	struct rk3399_grf_regs *grf;
 	int clk;
@@ -309,7 +416,8 @@
 	return 0;
 }

-static int rv1108_set_rmii_speed(struct dw_eth_dev *priv)
+static int rv1108_gmac_fix_rmii_speed(struct gmac_rockchip_platdata *pdata,
+				       struct dw_eth_dev *priv)
 {
 	struct rv1108_grf *grf;
 	int clk, speed;
@@ -360,6 +468,28 @@
 		     PX30_GMAC_PHY_INTF_SEL_RMII);
 }

+static void rk3228_gmac_set_to_rmii(struct gmac_rockchip_platdata *pdata)
+{
+	struct rk322x_grf *grf;
+	enum {
+		RK3228_GRF_CON_RMII_MODE_MASK = BIT(11),
+		RK3228_GRF_CON_RMII_MODE_SEL = BIT(11),
+		RK3228_RMII_MODE_MASK = BIT(10),
+		RK3228_RMII_MODE_SEL = BIT(10),
+		RK3228_GMAC_PHY_INTF_SEL_MASK  = GENMASK(6, 4),
+		RK3228_GMAC_PHY_INTF_SEL_RMII = BIT(6),
+	};
+
+	grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+	rk_clrsetreg(&grf->mac_con[1],
+		     RK3228_GRF_CON_RMII_MODE_MASK |
+		     RK3228_RMII_MODE_MASK |
+		     RK3228_GMAC_PHY_INTF_SEL_MASK,
+		     RK3228_GRF_CON_RMII_MODE_SEL |
+		     RK3228_RMII_MODE_SEL |
+		     RK3228_GMAC_PHY_INTF_SEL_RMII);
+}
+
 static void rk3228_gmac_set_to_rgmii(struct gmac_rockchip_platdata *pdata)
 {
 	struct rk322x_grf *grf;
@@ -438,6 +568,25 @@
 		     RK3308_GMAC_PHY_INTF_SEL_RMII);
 }

+static void rk3328_gmac_set_to_rmii(struct gmac_rockchip_platdata *pdata)
+{
+	struct rk3328_grf_regs *grf;
+	enum {
+		RK3328_RMII_MODE_MASK  = BIT(9),
+		RK3328_RMII_MODE = BIT(9),
+
+		RK3328_GMAC_PHY_INTF_SEL_MASK  = GENMASK(6, 4),
+		RK3328_GMAC_PHY_INTF_SEL_RMII = BIT(6),
+	};
+
+	grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+	rk_clrsetreg(pdata->integrated_phy ? &grf->mac_con[2] : &grf->mac_con[1],
+		     RK3328_RMII_MODE_MASK |
+		     RK3328_GMAC_PHY_INTF_SEL_MASK,
+		     RK3328_GMAC_PHY_INTF_SEL_RMII |
+		     RK3328_RMII_MODE);
+}
+
 static void rk3328_gmac_set_to_rgmii(struct gmac_rockchip_platdata *pdata)
 {
 	struct rk3328_grf_regs *grf;
@@ -553,6 +702,126 @@
 		     RV1108_GMAC_PHY_INTF_SEL_RMII);
 }

+static void rk3228_gmac_integrated_phy_powerup(struct gmac_rockchip_platdata *pdata)
+{
+	struct rk322x_grf *grf;
+	enum {
+		RK3228_GRF_CON_MUX_GMAC_INTEGRATED_PHY_MASK = BIT(15),
+		RK3228_GRF_CON_MUX_GMAC_INTEGRATED_PHY = BIT(15),
+	};
+	enum {
+		RK3228_MACPHY_CFG_CLK_50M_MASK = BIT(14),
+		RK3228_MACPHY_CFG_CLK_50M = BIT(14),
+
+		RK3228_MACPHY_RMII_MODE_MASK = GENMASK(7, 6),
+		RK3228_MACPHY_RMII_MODE = BIT(6),
+
+		RK3228_MACPHY_ENABLE_MASK = BIT(0),
+		RK3228_MACPHY_DISENABLE = 0,
+		RK3228_MACPHY_ENABLE = BIT(0),
+	};
+	enum {
+		RK3228_RK_GRF_CON2_MACPHY_ID_MASK = GENMASK(6, 0),
+		RK3228_RK_GRF_CON2_MACPHY_ID = 0x1234,
+	};
+	enum {
+		RK3228_RK_GRF_CON3_MACPHY_ID_MASK = GENMASK(5, 0),
+		RK3228_RK_GRF_CON3_MACPHY_ID = 0x35,
+	};
+
+	grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+	rk_clrsetreg(&grf->con_iomux,
+		     RK3228_GRF_CON_MUX_GMAC_INTEGRATED_PHY_MASK,
+		     RK3228_GRF_CON_MUX_GMAC_INTEGRATED_PHY);
+
+	rk_clrsetreg(&grf->macphy_con[2],
+		     RK3228_RK_GRF_CON2_MACPHY_ID_MASK,
+		     RK3228_RK_GRF_CON2_MACPHY_ID);
+
+	rk_clrsetreg(&grf->macphy_con[3],
+		     RK3228_RK_GRF_CON3_MACPHY_ID_MASK,
+		     RK3228_RK_GRF_CON3_MACPHY_ID);
+
+	/* disabled before trying to reset it */
+	rk_clrsetreg(&grf->macphy_con[0],
+		     RK3228_MACPHY_CFG_CLK_50M_MASK |
+		     RK3228_MACPHY_RMII_MODE_MASK |
+		     RK3228_MACPHY_ENABLE_MASK,
+		     RK3228_MACPHY_CFG_CLK_50M |
+		     RK3228_MACPHY_RMII_MODE |
+		     RK3228_MACPHY_DISENABLE);
+
+	reset_assert(&pdata->phy_reset);
+	udelay(10);
+	reset_deassert(&pdata->phy_reset);
+	udelay(10);
+
+	rk_clrsetreg(&grf->macphy_con[0],
+		     RK3228_MACPHY_ENABLE_MASK,
+		     RK3228_MACPHY_ENABLE);
+	udelay(30 * 1000);
+}
+
+static void rk3328_gmac_integrated_phy_powerup(struct gmac_rockchip_platdata *pdata)
+{
+	struct rk3328_grf_regs *grf;
+	enum {
+		RK3328_GRF_CON_RMII_MODE_MASK = BIT(9),
+		RK3328_GRF_CON_RMII_MODE = BIT(9),
+	};
+	enum {
+		RK3328_MACPHY_CFG_CLK_50M_MASK = BIT(14),
+		RK3328_MACPHY_CFG_CLK_50M = BIT(14),
+
+		RK3328_MACPHY_RMII_MODE_MASK = GENMASK(7, 6),
+		RK3328_MACPHY_RMII_MODE = BIT(6),
+
+		RK3328_MACPHY_ENABLE_MASK = BIT(0),
+		RK3328_MACPHY_DISENABLE = 0,
+		RK3328_MACPHY_ENABLE = BIT(0),
+	};
+	enum {
+		RK3328_RK_GRF_CON2_MACPHY_ID_MASK = GENMASK(6, 0),
+		RK3328_RK_GRF_CON2_MACPHY_ID = 0x1234,
+	};
+	enum {
+		RK3328_RK_GRF_CON3_MACPHY_ID_MASK = GENMASK(5, 0),
+		RK3328_RK_GRF_CON3_MACPHY_ID = 0x35,
+	};
+
+	grf = syscon_get_first_range(ROCKCHIP_SYSCON_GRF);
+	rk_clrsetreg(&grf->macphy_con[1],
+		     RK3328_GRF_CON_RMII_MODE_MASK,
+		     RK3328_GRF_CON_RMII_MODE);
+
+	rk_clrsetreg(&grf->macphy_con[2],
+		     RK3328_RK_GRF_CON2_MACPHY_ID_MASK,
+		     RK3328_RK_GRF_CON2_MACPHY_ID);
+
+	rk_clrsetreg(&grf->macphy_con[3],
+		     RK3328_RK_GRF_CON3_MACPHY_ID_MASK,
+		     RK3328_RK_GRF_CON3_MACPHY_ID);
+
+	/* disabled before trying to reset it */
+	rk_clrsetreg(&grf->macphy_con[0],
+		     RK3328_MACPHY_CFG_CLK_50M_MASK |
+		     RK3328_MACPHY_RMII_MODE_MASK |
+		     RK3328_MACPHY_ENABLE_MASK,
+		     RK3328_MACPHY_CFG_CLK_50M |
+		     RK3328_MACPHY_RMII_MODE |
+		     RK3328_MACPHY_DISENABLE);
+
+	reset_assert(&pdata->phy_reset);
+	udelay(10);
+	reset_deassert(&pdata->phy_reset);
+	udelay(10);
+
+	rk_clrsetreg(&grf->macphy_con[0],
+		     RK3328_MACPHY_ENABLE_MASK,
+		     RK3328_MACPHY_ENABLE);
+	udelay(30 * 1000);
+}
+
 static int gmac_rockchip_probe(struct udevice *dev)
 {
 	struct gmac_rockchip_platdata *pdata = dev_get_platdata(dev);
@@ -572,6 +841,9 @@
 	if (ret)
 		return ret;

+	if (pdata->integrated_phy && ops->integrated_phy_powerup)
+		ops->integrated_phy_powerup(pdata);
+
 	switch (eth_pdata->phy_interface) {
 	case PHY_INTERFACE_MODE_RGMII:
 		/* Set to RGMII mode */
@@ -619,7 +891,7 @@

 		if (!pdata->clock_input) {
 			rate = clk_set_rate(&clk, 50000000);
-			if (rate != 50000000)
+			if (rate != 50000000 && rate != 49500000)
 				return -EINVAL;
 		}
 		break;
@@ -655,7 +927,7 @@
 		break;

 	default:
-		debug("NO interface defined!\n");
+		debug("%s: no interface defined!\n", __func__);
 		return -ENXIO;
 	}

@@ -664,18 +936,33 @@

 static int gmac_rockchip_eth_start(struct udevice *dev)
 {
-	struct eth_pdata *pdata = dev_get_platdata(dev);
+	struct eth_pdata *eth_pdata = dev_get_platdata(dev);
 	struct dw_eth_dev *priv = dev_get_priv(dev);
 	struct rk_gmac_ops *ops =
 		(struct rk_gmac_ops *)dev_get_driver_data(dev);
+	struct gmac_rockchip_platdata *pdata = dev_get_platdata(dev);
 	int ret;

-	ret = designware_eth_init(priv, pdata->enetaddr);
-	if (ret)
-		return ret;
-	ret = ops->fix_mac_speed(priv);
+	ret = designware_eth_init(priv, eth_pdata->enetaddr);
 	if (ret)
 		return ret;
+
+	switch (eth_pdata->phy_interface) {
+	case PHY_INTERFACE_MODE_RGMII:
+		ret = ops->fix_rgmii_speed(pdata, priv);
+		if (ret)
+			return ret;
+		break;
+	case PHY_INTERFACE_MODE_RMII:
+		ret = ops->fix_rmii_speed(pdata, priv);
+		if (ret)
+			return ret;
+		break;
+	default:
+		debug("%s: no interface defined!\n", __func__);
+		return -ENXIO;
+	}
+
 	ret = designware_eth_enable(priv);
 	if (ret)
 		return ret;
@@ -693,42 +980,48 @@
 };

 const struct rk_gmac_ops px30_gmac_ops = {
-	.fix_mac_speed = px30_gmac_fix_mac_speed,
+	.fix_rmii_speed = px30_gmac_fix_rmii_speed,
 	.set_to_rmii = px30_gmac_set_to_rmii,
 };

 const struct rk_gmac_ops rk3228_gmac_ops = {
-	.fix_mac_speed = rk3228_gmac_fix_mac_speed,
+	.fix_rmii_speed = rk3228_gmac_fix_rmii_speed,
+	.fix_rgmii_speed = rk3228_gmac_fix_rgmii_speed,
+	.set_to_rmii = rk3228_gmac_set_to_rmii,
 	.set_to_rgmii = rk3228_gmac_set_to_rgmii,
+	.integrated_phy_powerup = rk3228_gmac_integrated_phy_powerup,
 };

 const struct rk_gmac_ops rk3288_gmac_ops = {
-	.fix_mac_speed = rk3288_gmac_fix_mac_speed,
+	.fix_rgmii_speed = rk3288_gmac_fix_rgmii_speed,
 	.set_to_rgmii = rk3288_gmac_set_to_rgmii,
 };

 const struct rk_gmac_ops rk3308_gmac_ops = {
-	.fix_mac_speed = rk3308_gmac_fix_mac_speed,
+	.fix_rmii_speed = rk3308_gmac_fix_rmii_speed,
 	.set_to_rmii = rk3308_gmac_set_to_rmii,
 };

 const struct rk_gmac_ops rk3328_gmac_ops = {
-	.fix_mac_speed = rk3328_gmac_fix_mac_speed,
+	.fix_rmii_speed = rk3328_gmac_fix_rmii_speed,
+	.fix_rgmii_speed = rk3328_gmac_fix_rgmii_speed,
+	.set_to_rmii = rk3328_gmac_set_to_rmii,
 	.set_to_rgmii = rk3328_gmac_set_to_rgmii,
+	.integrated_phy_powerup = rk3328_gmac_integrated_phy_powerup,
 };

 const struct rk_gmac_ops rk3368_gmac_ops = {
-	.fix_mac_speed = rk3368_gmac_fix_mac_speed,
+	.fix_rgmii_speed = rk3368_gmac_fix_rgmii_speed,
 	.set_to_rgmii = rk3368_gmac_set_to_rgmii,
 };

 const struct rk_gmac_ops rk3399_gmac_ops = {
-	.fix_mac_speed = rk3399_gmac_fix_mac_speed,
+	.fix_rgmii_speed = rk3399_gmac_fix_rgmii_speed,
 	.set_to_rgmii = rk3399_gmac_set_to_rgmii,
 };

 const struct rk_gmac_ops rv1108_gmac_ops = {
-	.fix_mac_speed = rv1108_set_rmii_speed,
+	.fix_rmii_speed = rv1108_gmac_fix_rmii_speed,
 	.set_to_rmii = rv1108_gmac_set_to_rmii,
 };

diff -Naur u-boot-2020.10-official/drivers/nvme/nvme.c u-boot-2020.10-patched/drivers/nvme/nvme.c
--- u-boot-2020.10-official/drivers/nvme/nvme.c	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/drivers/nvme/nvme.c	2021-01-20 21:51:17.000000000 -0500
@@ -61,6 +61,12 @@

 	/* Timeout field in the CAP register is in 500 millisecond units */
 	timeout = NVME_CAP_TIMEOUT(dev->cap) * 500;
+
+	#ifdef CONFIG_TARGET_PINEBOOK_PRO_RK3399
+	/* Some NVMe SSDs on Pinebook Pro don't become ready before timeout expires.
+	   Workaround: increase timeout */
+	timeout *= 2;
+	#endif

 	start = get_timer(0);
 	while (get_timer(start) < timeout) {
diff -Naur u-boot-2020.10-official/include/configs/rk3399_common.h u-boot-2020.10-patched/include/configs/rk3399_common.h
--- u-boot-2020.10-official/include/configs/rk3399_common.h	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/include/configs/rk3399_common.h	2021-01-20 21:51:18.000000000 -0500
@@ -19,6 +19,10 @@
 #define CONFIG_SYS_INIT_SP_ADDR		0x00300000
 #define CONFIG_SYS_LOAD_ADDR		0x00800800

+#define CONFIG_MISC 1
+#define CONFIG_MISC_INIT_R 1
+#define CONFIG_ROCKCHIP_EFUSE 1
+
 #if defined(CONFIG_SPL_BUILD) && defined(CONFIG_TPL_BOOTROM_SUPPORT)
 #define CONFIG_SPL_STACK		0x00400000
 #define CONFIG_SPL_MAX_SIZE             0x40000
diff -Naur u-boot-2020.10-official/include/configs/rockchip-common.h u-boot-2020.10-patched/include/configs/rockchip-common.h
--- u-boot-2020.10-official/include/configs/rockchip-common.h	2020-10-05 11:15:32.000000000 -0400
+++ u-boot-2020.10-patched/include/configs/rockchip-common.h	2021-01-20 21:51:18.000000000 -0500
@@ -17,8 +17,8 @@
 /* First try to boot from SD (index 0), then eMMC (index 1) */
 #if CONFIG_IS_ENABLED(CMD_MMC)
 	#define BOOT_TARGET_MMC(func) \
-		func(MMC, mmc, 0) \
-		func(MMC, mmc, 1)
+		func(MMC, mmc, 1) \
+		func(MMC, mmc, 0)
 #else
 	#define BOOT_TARGET_MMC(func)
 #endif
diff -Naur u-boot-2020.10-official/trust.ini u-boot-2020.10-patched/trust.ini
--- u-boot-2020.10-official/trust.ini	1969-12-31 19:00:00.000000000 -0500
+++ u-boot-2020.10-patched/trust.ini	2021-01-20 21:51:17.000000000 -0500
@@ -0,0 +1,15 @@
+[VERSION]
+MAJOR=1
+MINOR=0
+[BL30_OPTION]
+SEC=0
+[BL31_OPTION]
+SEC=1
+PATH=bl31.elf
+ADDR=0x10000
+[BL32_OPTION]
+SEC=0
+[BL33_OPTION]
+SEC=0
+[OUTPUT]
+PATH=trust.bin
